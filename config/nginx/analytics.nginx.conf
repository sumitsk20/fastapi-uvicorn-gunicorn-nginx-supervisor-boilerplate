limit_req_zone $binary_remote_addr zone=analytics_live:10m rate=10r/s;


map $http_forwarded $proxy_add_forwarded {
    # If the incoming Forwarded header is syntactically valid, append to it
        "~^(,[ \\t]*)*([!#$%&'*+.^_`|~0-9A-Za-z-]+=([!#$%&'*+.^_`|~0-9A-Za-z-]+|\"([\\t \\x21\\x23-\\x5B\\x5D-\\x7E\\x80-\\xFF]|\\\\[\\t \\x21-\\x7E\\x80-\\xFF])*\"))?(;([!#$%&'*+.^_`|~0-9A-Za-z-]+=([!#$%&'*+.^_`|~0-9A-Za-z-]+|\"([\\t \\x21\\x23-\\x5B\\x5D-\\x7E\\x80-\\xFF]|\\\\[\\t \\x21-\\x7E\\x80-\\xFF])*\"))?)*([ \\t]*,([ \\t]*([!#$%&'*+.^_`|~0-9A-Za-z-]+=([!#$%&'*+.^_`|~0-9A-Za-z-]+|\"([\\t \\x21\\x23-\\x5B\\x5D-\\x7E\\x80-\\xFF]|\\\\[\\t \\x21-\\x7E\\x80-\\xFF])*\"))?(;([!#$%&'*+.^_`|~0-9A-Za-z-]+=([!#$%&'*+.^_`|~0-9A-Za-z-]+|\"([\\t \\x21\\x23-\\x5B\\x5D-\\x7E\\x80-\\xFF]|\\\\[\\t \\x21-\\x7E\\x80-\\xFF])*\"))?)*)?)*$" "$http_forwarded, $proxy_forwarded_elem";

    # Otherwise, replace it
        default "$proxy_forwarded_elem";
}

map $remote_addr $proxy_forwarded_elem {
    # IPv4 addresses can be sent as-is
        ~^[0-9.]+$          "for=$remote_addr";

    # IPv6 addresses need to be bracketed and quoted
        ~^[0-9A-Fa-f:.]+$   "for=\"[$remote_addr]\"";

    # Unix domain socket names cannot be represented in RFC 7239 syntax
        default             "for=unknown";
}

upstream analytics {
    server unix:/webapps/demo-analytics/run/unicorn_pre_dev.sock fail_timeout=0;
}

server {
    listen 80;
    server_name analytics.ghoom.co; # managed by Certbot
    return 301 https://$host$request_uri;
}



server {
    listen 443 ssl; # managed by Certbot
    server_name analytics.ghoom.co; # managed by Certbot

    ssl_certificate /etc/letsencrypt/live/ghoom.co/fullchain.pem; # managed by Certbot
    ssl_certificate_key /etc/letsencrypt/live/ghoom.co/privkey.pem; # managed by Certbot
    include /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot
    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; # managed by Certbot

    gzip on;
    gzip_disable "MSIE [1-6]\.";
    gzip_proxied any;

    # a pretty comprehensive list of content mime types that we want to compress
    # there's a lot of repetition here because different applications might use different
    # (and possibly non-standard) types. we don't really care, we still want them included
    # don't include text/html -- it is always included anyway
    gzip_types
        text/css
        text/plain
        text/javascript
        application/javascript
        application/json
        application/x-javascript
        application/xml
        application/xml+rss
        application/xhtml+xml
        application/x-font-ttf
        application/x-font-opentype
        application/vnd.ms-fontobject
        image/svg+xml
        image/x-icon
        application/rss+xml
        application/atom_xml;

    # increase the compression level, at the expense of additional CPU
    # cpu cycles are cheap virtually everywhere now, bandwidth not nearly as much
    gzip_comp_level 9;

    # the default is to gzip only HTTP 1.1 requests
    # we want to gzip http 1.0 requests, too, so lower the level required
    gzip_http_version 1.0;

    # set the Vary: Accept-Encoding header to force proxies to store compressed and uncompressed versions
    # per the nginx docs, a bug in IE 4 - 6 will cause them to not cache anything with this on
    # most people aren't going to care about ie 6 anymore, but keep that in mind
    gzip_vary on;

    # increase the size of the buffers which hold responses to make sure larger content can be compressed too
    # this means there are 16 buffers and they can each hold 8k
    # if you serve a lot of ridiculously large text (like combined CSS) you might consider upping this slightly
    gzip_buffers 20 8k;

    # up the minimum length a little to account for gzip overhead
    # this means anything smaller than 50 bytes won't be compressed.
    # the default is 20 bytes, which is sooo tiny it's a waste to compress
    gzip_min_length 60;


    location / {
        limit_req zone=analytics_live burst=20 nodelay;
        proxy_pass http://analytics;
        proxy_connect_timeout 180s;
        proxy_read_timeout 300s;

        proxy_http_version  1.1;
        proxy_cache_bypass  $http_upgrade;
        proxy_set_header Connection        "upgrade";
        proxy_set_header Upgrade           $http_upgrade;
        proxy_set_header Host              $host;
        proxy_set_header Forwarded         $proxy_add_forwarded;
        proxy_set_header X-Real-IP         $remote_addr;
        proxy_set_header X-Forwarded-For   $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Forwarded-Host  $host;
        proxy_set_header X-Forwarded-Port  $server_port;
    }
}